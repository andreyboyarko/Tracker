import UIKit

import CoreData

// MARK: - –ê–±—Å—Ç—Ä–∞–∫—Ü–∏—è
protocol TrackerStoring: AnyObject {
    var onChange: (() -> Void)? { get set }
    func create(_ tracker: Tracker, categoryTitle: String) throws
    func delete(id: UUID) throws
    func update(_ tracker: Tracker, categoryTitle: String) throws
    func snapshot() throws -> [(tracker: Tracker, categoryTitle: String)]
    func tracker(by id: UUID) throws -> Tracker?
}

// MARK: - –†–µ–∞–ª–∏–∑–∞—Ü–∏—è
final class TrackerStore: NSObject, TrackerStoring {

    // –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    private let stack: CoreDataStack
    private let categoryStore: TrackerCategoryStoring

    // –ö–æ–ª–±—ç–∫ –¥–ª—è VC ‚Äî –¥–µ—Ä–≥–∞–µ–º –ø—Ä–∏ –ª—é–±—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –¥–∞–Ω–Ω—ã—Ö
    var onChange: (() -> Void)?

    // FRC: –≥—Ä—É–ø–ø—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –∫–∞—Ç–µ–≥–æ—Ä–∏—è ‚Üí –∏–º—è
    private lazy var frc: NSFetchedResultsController<TrackerCoreData> = {
        let req: NSFetchRequest<TrackerCoreData> = TrackerCoreData.fetchRequest()
        req.sortDescriptors = [
            NSSortDescriptor(key: "category.title", ascending: true),
            NSSortDescriptor(key: "name",            ascending: true)
        ]

        let frc = NSFetchedResultsController(
            fetchRequest: req,
            managedObjectContext: stack.viewContext,
            sectionNameKeyPath: "category.title",
            cacheName: nil
        )
        frc.delegate = self
        try? frc.performFetch()
        return frc
    }()

    // MARK: - Init
    init(stack: CoreDataStack, categoryStore: TrackerCategoryStoring) {
        self.stack = stack
        self.categoryStore = categoryStore
        super.init()
        _ = frc // –ø—Ä–æ–≥—Ä–µ–µ–º
    }

    // MARK: - CRUD

    /// –°–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–∫–µ—Ä –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    func create(_ tracker: Tracker, categoryTitle: String) throws {
        let ctx = stack.viewContext

        let obj = TrackerCoreData(context: ctx)
        obj.id = tracker.id
        obj.name = tracker.title
        obj.emoji = tracker.emoji

        // UIColor ‚Üí HEX (–≤ –∞—Å—Å–µ—Ç–∞—Ö —Ö—Ä–∞–Ω–∏—Ç–µ, –∞ –≤ –ë–î ‚Äî —Å—Ç—Ä–æ–∫–∞)
        obj.colorHex = tracker.color.hexString

        // [WeekdaysEnum] ‚Üí Int16 (–±–∏—Ç–æ–≤–∞—è –º–∞—Å–∫–∞)
        obj.scheduleMask = Int16(WeekdayMask.make(from: Set(tracker.weekdays)))

        // –æ–±–µ—Å–ø–µ—á–∏—Ç—å/–ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        obj.category = try categoryStore.ensureCategory(title: categoryTitle, in: ctx)

        try ctx.save()
    }

    /// –£–¥–∞–ª–∏—Ç—å —Ç—Ä–µ–∫–µ—Ä
    func delete(id: UUID) throws {
        let ctx = stack.viewContext
        let req: NSFetchRequest<TrackerCoreData> = TrackerCoreData.fetchRequest()
        req.predicate = NSPredicate(format: "id == %@", id as CVarArg)

        if let obj = try ctx.fetch(req).first {
            ctx.delete(obj)
            try ctx.save()
        }
    }

    /// –û–±–Ω–æ–≤–∏—Ç—å —Ç—Ä–µ–∫–µ—Ä (–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é)
    func update(_ tracker: Tracker, categoryTitle: String) throws {
        let ctx = stack.viewContext
        let req: NSFetchRequest<TrackerCoreData> = TrackerCoreData.fetchRequest()
        req.predicate = NSPredicate(format: "id == %@", tracker.id as CVarArg)

        guard let obj = try ctx.fetch(req).first else { return }

        obj.name = tracker.title
        obj.emoji = tracker.emoji
        obj.colorHex = tracker.color.hex6
        obj.scheduleMask = Int16(WeekdayMask.make(from: Set(tracker.weekdays)))
        obj.category = try categoryStore.ensureCategory(title: categoryTitle, in: ctx)

        try ctx.save()
    }

    /// –ù–∞–π—Ç–∏ –¥–æ–º–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å –ø–æ id
    func tracker(by id: UUID) throws -> Tracker? {
        let ctx = stack.viewContext
        let req: NSFetchRequest<TrackerCoreData> = TrackerCoreData.fetchRequest()
        req.predicate = NSPredicate(format: "id == %@", id as CVarArg)
        return try ctx.fetch(req).first.map { $0.toDomain() }
    }

    /// –°–Ω–∏–º–æ–∫ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Å–µ–∫—Ü–∏–π –≤ UI
    func snapshot() throws -> [(tracker: Tracker, categoryTitle: String)] {
        let rows = frc.fetchedObjects ?? []
        return rows.compactMap { obj in
            guard let cat = obj.category?.title else { return nil }
            return (obj.toDomain(), cat)
        }
    }
}

// MARK: - NSFetchedResultsControllerDelegate
extension TrackerStore: NSFetchedResultsControllerDelegate {
    func controllerDidChangeContent(_ controller: NSFetchedResultsController<NSFetchRequestResult>) {
        onChange?()
    }
}

//// MARK: - Mapping CoreData ‚Üî Domain
//private extension TrackerCoreData {
//    func toDomain() -> Tracker {
//        // HEX ‚Üí UIColor (—Å–º. –≤–∞—à UIColor+HexHelpers)
//        let uiColor = UIColor(hex6: colorHex ?? "#999999") ?? .systemGray
//
//        // Int16 ‚Üí [WeekdaysEnum]
//        let daysSet = WeekdayMask.toSet(UInt16(scheduleMask))
//        let days = Array(daysSet) // –ø–æ—Ä—è–¥–æ–∫ –¥–ª—è UI –Ω–µ –∫—Ä–∏—Ç–∏—á–µ–Ω; –æ—Ç—Å–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏
//
//        return Tracker(
//            id: id ?? UUID(),
//            title: name ?? "",
//            color: uiColor,
//            emoji: emoji ?? "üôÇ",
//            weekdays: days
//        )
//    }
//}
